package app

import (
	"encoding/binary"
	"fmt"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestLoginFlow(t *testing.T) {
	// eu decidir por essa key para simular a chave do server
	var clientKey = []byte{
		0x12, 0x34, 0x00, 0x00,
		0x56, 0x78, 0x21, 0x43,
	}

	// client encryption
	clientCrypt := NewGameCrypt()

	// server encryption
	serverCrypt := NewGameCrypt()

	// aqui eu recebo o primeiro pacote do server informando qual a chave utilizada: 148, 53, 0, 0, 161, 108, 84, 135
	KeyPacket := []byte{0, 1, 148, 53, 0, 0, 161, 108, 84, 135, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0}

	// aqui eu vou setar os 4 bytes que s√£o rotativos que o server me enviou no server encryption
	key := binary.LittleEndian.Uint32(KeyPacket[2:6])
	serverCrypt.SetKey(key)

	// e agora eu vou substituir a chave do server com a minha chave que vou enviar do client
	copy(KeyPacket[2:], clientKey)

	clientKeyPacket := binary.LittleEndian.Uint32(KeyPacket[2:6])
	clientCrypt.SetKey(clientKeyPacket)

	// agora eu envio KeyPacket para o client
	// Client responde com esse pacote:
	firstPacketFromClient := []byte{66, 3, 3, 102, 199, 216, 140, 127, 53, 0, 0, 143, 89, 74, 247, 197, 209, 254, 137, 143, 184, 162, 96, 56, 219, 62, 7, 6, 167, 203, 159}

	// now i need decoded client packet:
	clientCrypt.Decrypt2(firstPacketFromClient)
	// require.Equal(t, []byte{
	// 	81, 16, 0, 101, 0, 115, 0, 116, 0, 0, 0, 143, 119, 127, 233, 181, 94, 26, 119, 6, 150, 118, 150, 223, 169, 208, 57, 1, 0, 0, 0,
	// }, firstPacketFromClient)

	// now i need encrypt client packet with server key
	serverCrypt.Encrypt2(firstPacketFromClient)
	require.Equal(t, []byte{
		156, 221, 221, 184, 25, 6, 82, 161, 53, 0, 0, 143, 89, 74, 247, 197,
		15, 32, 87, 81, 102, 124, 190, 230, 219, 62, 7, 6, 167, 203, 159,
	}, firstPacketFromClient)
}

func TestGameCrypt(t *testing.T) {
	decKey := []byte{148, 53, 0, 0, 161, 108, 84, 135}

	data := []byte{135, 179, 179, 179, 18, 44, 120, 158, 10, 93, 93, 52, 149, 154, 206, 38, 178, 135, 135, 253, 87, 56, 108, 138, 30, 79, 79, 34, 131, 134, 210, 59, 175, 154, 154, 132, 209, 26, 222, 89, 205, 248, 248, 248, 89, 53, 97, 230, 114, 71, 71, 71, 230, 138, 222, 89, 205, 248, 248, 249, 88, 52, 96, 231, 115, 70, 70, 70, 231, 139, 223, 88, 204, 249, 249, 249, 88, 52, 96, 231, 135, 26, 90, 90, 251, 151, 195, 68, 20, 177, 241, 241, 80, 60, 104, 239, 123, 78, 78, 2, 163, 207, 155, 28, 136, 189, 189, 189, 28, 112, 36, 163, 55, 2, 2, 2, 163, 207, 155, 28, 136, 189, 189, 189, 28, 112, 36, 163, 55, 2, 2, 2, 163, 207, 155, 28, 136, 189, 189, 189, 28, 112, 36, 167, 168, 157, 141, 141, 44, 64, 20, 147, 7, 50, 50, 50, 147, 255, 171, 44, 184, 141, 141, 141, 44, 64, 20, 147, 7, 50, 50, 118, 73, 37, 97, 230, 114, 71, 71, 71, 230, 138, 222, 89, 205, 248, 248, 248, 89, 53, 97, 230, 114, 71, 71, 71, 230, 138, 222, 29, 23, 34, 50, 50, 147, 255, 171, 194, 87, 98, 98, 98, 195, 175, 251, 124, 232, 221, 221, 221, 124, 16, 68, 195, 87, 98, 98, 98, 195, 175, 251, 124, 232, 221, 221, 212, 97, 13, 89, 222, 74, 127, 127, 127, 222, 178, 230, 97, 245, 192, 192, 192, 97, 13, 89, 222, 74, 127, 127, 127, 222, 178, 230, 104, 232, 221, 221, 221, 124, 16, 68, 195, 87, 98, 98, 98, 195, 175, 251, 124, 232, 221, 221, 221, 124, 16, 68, 195, 163, 62, 126, 126, 223, 179, 231, 96, 48, 149, 213, 213, 116, 24, 76, 203, 95, 106, 106, 107, 202, 166, 242, 117}
	want := []byte{19, 1, 0, 0, 0, 82, 0, 97, 0, 98, 0, 105, 0, 99, 0, 111, 0, 0, 0, 122, 11, 3, 0, 97, 0, 100, 0, 109, 0, 105, 0, 110, 0, 0, 0, 30, 244, 167, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 168, 64, 0, 0, 0, 0, 0, 196, 144, 64, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 155, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 158, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 158, 0, 16, 0, 0, 0, 0, 238, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 168, 64, 0, 0, 0, 0, 0, 196, 144, 64, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}

	gameCrypt := NewGameCrypt()
	gameCrypt.KeyHack2(decKey, decKey)
	gameCrypt.SetEnabled()

	gameCrypt.Decrypt2(data)
	require.Equal(t, want, data)

	encryptWant := []byte{135, 179, 179, 179, 18, 44, 120, 158, 10, 93, 93, 52, 149, 154, 206, 38, 178, 135, 135, 253, 87, 56, 108, 138, 30, 79, 79, 34, 131, 134, 210, 59, 175, 154, 154, 132, 209, 26, 222, 89, 205, 248, 248, 248, 89, 53, 97, 230, 114, 71, 71, 71, 230, 138, 222, 89, 205, 248, 248, 249, 88, 52, 96, 231, 115, 70, 70, 70, 231, 139, 223, 88, 204, 249, 249, 249, 88, 52, 96, 231, 135, 26, 90, 90, 251, 151, 195, 68, 20, 177, 241, 241, 80, 60, 104, 239, 123, 78, 78, 2, 163, 207, 155, 28, 136, 189, 189, 189, 28, 112, 36, 163, 55, 2, 2, 2, 163, 207, 155, 28, 136, 189, 189, 189, 28, 112, 36, 163, 55, 2, 2, 2, 163, 207, 155, 28, 136, 189, 189, 189, 28, 112, 36, 167, 168, 157, 141, 141, 44, 64, 20, 147, 7, 50, 50, 50, 147, 255, 171, 44, 184, 141, 141, 141, 44, 64, 20, 147, 7, 50, 50, 118, 73, 37, 97, 230, 114, 71, 71, 71, 230, 138, 222, 89, 205, 248, 248, 248, 89, 53, 97, 230, 114, 71, 71, 71, 230, 138, 222, 29, 23, 34, 50, 50, 147, 255, 171, 194, 87, 98, 98, 98, 195, 175, 251, 124, 232, 221, 221, 221, 124, 16, 68, 195, 87, 98, 98, 98, 195, 175, 251, 124, 232, 221, 221, 212, 97, 13, 89, 222, 74, 127, 127, 127, 222, 178, 230, 97, 245, 192, 192, 192, 97, 13, 89, 222, 74, 127, 127, 127, 222, 178, 230, 104, 232, 221, 221, 221, 124, 16, 68, 195, 87, 98, 98, 98, 195, 175, 251, 124, 232, 221, 221, 221, 124, 16, 68, 195, 163, 62, 126, 126, 223, 179, 231, 96, 48, 149, 213, 213, 116, 24, 76, 203, 95, 106, 106, 107, 202, 166, 242, 117}
	dataToEncrypt := []byte{19, 1, 0, 0, 0, 82, 0, 97, 0, 98, 0, 105, 0, 99, 0, 111, 0, 0, 0, 122, 11, 3, 0, 97, 0, 100, 0, 109, 0, 105, 0, 110, 0, 0, 0, 30, 244, 167, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 168, 64, 0, 0, 0, 0, 0, 196, 144, 64, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 155, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 158, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 158, 0, 16, 0, 0, 0, 0, 238, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 168, 64, 0, 0, 0, 0, 0, 196, 144, 64, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}

	gameCrypt.Encrypt2(dataToEncrypt)

	fmt.Println("encrypted", dataToEncrypt)
	fmt.Println("encrypt wnat", encryptWant)

	require.Equal(t, encryptWant, dataToEncrypt)
}

// before xor enc [153, 26, 0, 0, 161, 108, 84, 135]
// after xor enc [190, 26, 0, 0, 161, 108, 84, 135]
func TestGameCryptEncrypt2(t *testing.T) {
	key := []byte{61, 60, 0, 0, 161, 108, 84, 135}
	data := []byte{56, 111, 0, 107, 0, 0, 0, 0, 0, 0, 0}
	want := []byte{5, 86, 86, 61, 156, 240, 164, 35, 30, 34, 34}

	gameCrypt := NewGameCrypt()
	gameCrypt.KeyHack(key, nil)
	gameCrypt.SetEnabled()

	gameCrypt.Encrypt(data, 0, 11)
	require.Equal(t, want, data)
}

func TestGameCryptEncrypt(t *testing.T) {
	key := 6809
	data := []byte{8, 103, 0, 98, 0, 99, 0, 120, 0, 98, 0, 97, 0, 117, 0, 0, 0, 52, 229, 20, 0, 168, 30, 1, 0, 52, 229, 20, 0, 62, 89, 138, 85, 1, 0, 0, 0}
	want := []byte{145, 236, 236, 142, 47, 32, 116, 139, 18, 106, 106, 11, 170, 179, 231, 96, 249, 215, 50, 38, 135, 67, 9, 143, 22, 56, 221, 201, 104, 58, 55, 58, 246, 237, 237, 237, 76}

	gameCrypt := NewGameCrypt()
	gameCrypt.SetKey(uint32(key))
	gameCrypt.SetEnabled()

	gameCrypt.Encrypt(data, 0, 37)
	require.Equal(t, want, data)
}

// dec after := 155, 32, 0, 0, 161, 108, 84, 135
func TestGameCryptDecrypt(t *testing.T) {
	xorDec := []byte{114, 32, 0, 0, 161, 108, 84, 135}

	data := []byte{56, 24, 24, 24, 185, 208, 132, 3, 113, 2, 2, 91, 250, 197, 145, 44, 94, 126, 126, 43, 138, 149, 193, 35, 81, 81, 81, 126, 223, 156, 200, 39, 85, 26, 26, 119, 214, 223, 139, 12, 126}
	want := []byte{74, 0, 0, 0, 0, 5, 0, 0, 0, 83, 0, 89, 0, 83, 0, 58, 0, 0, 0, 85, 0, 115, 0, 101, 0, 32, 0, 47, 0, 47, 0, 104, 0, 111, 0, 109, 0, 101, 0, 0, 0}

	gameCrypt := NewGameCrypt()
	gameCrypt.SetEnabled()
	gameCrypt.KeyHack(nil, xorDec)

	gameCrypt.Decrypt(data, 0, 41)
	require.Equal(t, want, data)
}
